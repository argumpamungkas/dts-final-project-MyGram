basePath: /
definitions:
  models.Comment:
    properties:
      comment_message:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Photo:
    properties:
      caption:
        type: string
      comment_message:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.SocialMedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: integer
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      photos:
        items:
          $ref: '#/definitions/models.Photo'
        type: array
      socials_media:
        items:
          $ref: '#/definitions/models.SocialMedia'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a final project
  title: My Gram API
  version: "1.0"
paths:
  /comment/delete/{commentID}:
    delete:
      consumes:
      - application/json
      description: Delete data comment by id
      parameters:
      - description: commentID of the data comment to be deleted
        in: path
        name: commentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Delete data comment with commentID
      tags:
      - Delete Comment
  /comment/getAll:
    get:
      consumes:
      - application/json
      description: Get details of all comment or add query parameter photo_id for
        all comment from photo_id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Get details of All comment
      tags:
      - Get All Comment
  /comment/getOne/{commentID}:
    get:
      consumes:
      - application/json
      description: Get details of comment corresponding to the input commentID
      parameters:
      - description: ID of the photo
        in: path
        name: commentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Get details for a given commentID
      tags:
      - Get Comment by ID
  /comment/post:
    post:
      consumes:
      - application/json
      description: 'Post a new Comment, NOTE : id auto increment, so in body id is
        deleted. and add query parameter photo_id for comment'
      parameters:
      - description: create comment
        in: body
        name: models.Comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Post Comment
      tags:
      - Create Comment
  /comment/update/{commentID}:
    put:
      consumes:
      - application/json
      description: Update data comment by id
      parameters:
      - description: commentID of the data comment to be updated
        in: path
        name: commentID
        required: true
        type: integer
      - description: updated comment
        in: body
        name: models.Comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Updated data comment with commentID
      tags:
      - Update Comment
  /photo/delete/{photoID}:
    delete:
      consumes:
      - application/json
      description: Delete data photo by id
      parameters:
      - description: photoID of the data photo to be deleted
        in: path
        name: photoID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Delete data photo with photoID
      tags:
      - Delete Photo
  /photo/getAll:
    get:
      consumes:
      - application/json
      description: Get details of all photo or add query parameter user_id for all
        photo from user_id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Get details of All photo
      tags:
      - Get All Photo
  /photo/getOne/{photoID}:
    get:
      consumes:
      - application/json
      description: Get details of photo corresponding to the input photoID
      parameters:
      - description: ID of the photo
        in: path
        name: photoID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Get details for a given photoID
      tags:
      - Get Photo by ID
  /photo/post:
    post:
      consumes:
      - application/json
      description: 'Post a new Photo, NOTE : id auto increment, so in body id is deleted'
      parameters:
      - description: create photo
        in: body
        name: models.Photo
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Post Photo
      tags:
      - Create Photo
  /photo/update/{photoID}:
    put:
      consumes:
      - application/json
      description: 'Update data social media by id, NOTE: photo is not updated, just
        title and caption can be updated, so in the body photo_url doesn''t use'
      parameters:
      - description: photoID of the data photo to be updated
        in: path
        name: photoID
        required: true
        type: integer
      - description: updated photo
        in: body
        name: models.Photo
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      summary: Updated data photo with socialMediaID
      tags:
      - Update Photo
  /social-media/create:
    post:
      consumes:
      - application/json
      description: 'Post create a new social media, NOTE : id auto increment, so in
        body id is deleted'
      parameters:
      - description: create social media
        in: body
        name: models.SocialMedia
        required: true
        schema:
          $ref: '#/definitions/models.SocialMedia'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Post Social media
      tags:
      - Create Social Media
  /social-media/delete/{socialMediaID}:
    delete:
      consumes:
      - application/json
      description: Delete data social media by id
      parameters:
      - description: socialMediaID of the data social media to be deleted
        in: path
        name: socialMediaID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Delete data social media with socialMediaID
      tags:
      - Delete Social Media
  /social-media/getAll:
    get:
      consumes:
      - application/json
      description: Get details of all social media or add query parameter user_id
        for all social media from it
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Get details of All social media
      tags:
      - Get All Social Media
  /social-media/getOne/{socialMediaID}:
    get:
      consumes:
      - application/json
      description: Get details of social media corresponding to the input socialMediaID
      parameters:
      - description: ID of the social media
        in: path
        name: socialMediaID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Get details for a given socialMediaID
      tags:
      - Get Social Media by ID
  /social-media/update/{socialMediaID}:
    put:
      consumes:
      - application/json
      description: Update data social media by id
      parameters:
      - description: socialMediaID of the data social media to be updated
        in: path
        name: socialMediaID
        required: true
        type: integer
      - description: updated social media
        in: body
        name: models.SocialMedia
        required: true
        schema:
          $ref: '#/definitions/models.SocialMedia'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
      summary: Updated data social media with socialMediaID
      tags:
      - Update Social Media
  /user/login:
    post:
      consumes:
      - application/json
      description: Login user needed for crud of the photo, social media and comment
        because if you login you have token for that
      parameters:
      - description: login user
        in: body
        name: models.User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Login User
      tags:
      - Login user
swagger: "2.0"
